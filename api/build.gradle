buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
springBoot {
    layout = 'ZIP'
}
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'docker'

jar {
    baseName = 'com-giu-api'
}
version = '0.0.1'

dependencies {
    //Spring dependencies
    compile "ch.qos.logback:logback-classic:1.1.5"
    compile "ch.qos.logback:logback-access:1.1.5"
    compile "ch.qos.logback:logback-core:1.1.5"
    compile "org.springframework.boot:spring-boot:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    //compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    //compile "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-actuator:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    //compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
    //compile "org.springframework.security:spring-security-aspects"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    //testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.5.RELEASE'
    compile 'org.springframework.data:spring-data-commons:1.12.1.RELEASE'

    compile 'org.springframework.data:spring-data-redis:1.6.2.RELEASE'
    compile 'redis.clients:jedis:2.8.0'

    compile 'org.apache.velocity:velocity:1.6.2'

    compile 'org.springframework.ldap:spring-ldap-core:2.1.0.RELEASE'

    compile project(':giu-repository')

    //Test dependencies
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile ('org.spockframework:spock-core:1.0-groovy-2.4-1'){
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'org.codehaus.groovy:groovy-all:4.5.1'
    compile 'net.logstash.logback:logstash-logback-encoder:4.5.1'
}

task uploadNexus() {
    if(project.hasProperty('release')){
        println "Release $project.release"
        project.version = project.release
    }
}

uploadArchives.dependsOn('uploadNexus')


dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-config:1.0.2.RELEASE'
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '2.4'
}

docker {
    baseImage("java:8")
    maintainer("Redbee")
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    dryRun = true
    applicationName = jar.baseName

    // dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }

    volume("/tmp", "/newrelic", "/log")
    addFile("${jar.baseName}-${project.version}.jar", "app.jar")
    runCommand("bash -c 'touch /app.jar'")
    entryPoint(["java","-Djava.security.egd=file:/dev/./urandom", "-javaagent:/newrelic/newrelic.jar","-jar","/app.jar"])
}


bootRun {

    //jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}